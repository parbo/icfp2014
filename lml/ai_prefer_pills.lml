(letrec (init modulo random map lman lmanpos lmandir mapobjdir turncw turnccw step mapobj findx nextstep)
  ((lambda (ws unused) (tuple 42 step))
   (lambda (a b) (- a  (* b (div a b))))
   (lambda (seed) (modulo (* 7 seed) 101))
   (lambda (ws) (car ws))
   (lambda (ws) (car (cdr ws)))
   (lambda (ws) (car (cdr (lman ws))))
   (lambda (ws) (car (cdr (cdr (lman ws)))))
   (lambda (ws dir) (mapobj (map ws) (nextstep (lmanpos ws) dir)))
   (lambda (dir) (let (newdir) ((+ 1 dir))
                      (if (> newdir 3)
                          0
                        newdir)))
   (lambda (dir) (let (newdir) ((- dir 1))
                      (if (< newdir 0)
                          3
                        newdir)))
   (lambda (ai ws) (tuple (random (print ai))
                          ;; Get the map object in the direction we're facing
                          (let (obj) ((mapobj (map ws) (nextstep (lmanpos ws) (lmandir ws))))
                               (if (eq obj 0)
                                   ;; At a wall? Turn towards pills
                                   (letrec (turnuntilpill) ((lambda (currdir startdir)
                                                              (let (newdir) ((turncw currdir))
                                                                   (if (eq newdir startdir)
                                                                       currdir
                                                                     (let (newobj) ((mapobj (map ws) (nextstep (lmanpos ws) newdir)))
                                                                          (if (eq (print newobj) 2) ;; pill
                                                                              newdir
                                                                            (turnuntilpill newdir startdir)))))))
                                           (turnuntilpill (modulo ai 4) (modulo ai 4))) ;; Use "random" direction
                                 ;; Not facing a wall, just keep on going
                                 (lmandir ws)))))
   (lambda (map pos)
     (let (x y) ((car pos) (cdr pos))
          (if (eq y 0)
              (findx (car map) x)
            (mapobj (cdr map) (tuple x (- y 1))))))
   (lambda (row x)
     (if (eq x 0)
         (car row)
       (findx (cdr row) (- x 1))))
   (lambda (pos dir)
     (let (x y) ((car pos) (cdr pos))
          (if (eq dir 0)
              (tuple x (- y 1))
            (if (eq dir 1)
                (tuple (+ x 1) y)
              (if (eq dir 2)
                  (tuple x (+ y 1))
                (tuple (- x 1) y)))))))
  (init)
  )
